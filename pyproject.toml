[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "stomper"
version = "0.1.0"
description = "Automated code quality fixing tool"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "langchain>=0.3.27",
    "langgraph>=0.6.7",
    "pathspec>=0.12.1",
    "pydantic>=2.11.9",
    "rich>=14.1.0",
    "typer>=0.19.2",
    "gitpython>=3.1.40",
    "dotenv>=0.9.9",
    "jinja2>=3.1.6",
    "grandalf>=0.8",
]

[project.scripts]
stomper = "stomper.cli:app"
stomp = "stomper.cli:app"

[dependency-groups]
dev = [
    "mypy>=1.18.2",
    "pytest>=8.4.2",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=7.0.0",
    "ruff>=0.13.2",
]

[tool.uv]
package = true

[tool.pytest.ini_options]
markers = [
    "unit: Unit tests for individual components",
    "e2e: End-to-end tests for full workflows", 
    "integration: Integration tests for component interactions",
]
# Asyncio configuration
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.stomper]
# Quality tools to run
quality_tools = ["ruff", "mypy"]
ai_agent = "cursor-cli"
max_retries = 3
parallel_files = 1

[tool.stomper.files]
# File discovery patterns
# include = ["src/**/*.py", "tests/**/*.py"]
# exclude = ["**/migrations/**", "**/legacy/**", "**/__pycache__/**"]
# max_files_per_run = 100
# parallel_processing = true

[tool.stomper.ignores]
# Files and errors to ignore
# files = ["**/migrations/**", "**/legacy/**"]
# errors = ["E501", "F401"]

[tool.stomper.git]
# Git integration settings
branch_prefix = "stomper"
commit_style = "conventional"

[tool.ruff]
# Ruff configuration - balanced but thorough
target-version = "py313"
line-length = 100

[tool.ruff.lint]
# Linter rules configuration
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings  
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG",    # flake8-unused-arguments
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "TID",    # flake8-tidy-imports
    "Q",      # flake8-quotes
    "RUF",    # Ruff-specific rules
]
ignore = [
    "E501",   # line too long (handled by formatter)
    "B008",   # do not perform function calls in argument defaults
    "B904",   # raise from None
    "C901",   # too complex
    "ARG002", # unused method argument
    "ARG001", # unused function argument (when it's self)
    "SIM108", # use ternary operator instead of if-else-block
    "TC003",  # move standard library import into TYPE_CHECKING block (updated from TCH003)
]

[tool.ruff.lint.per-file-ignores]
# Allow unused imports in __init__.py files
"__init__.py" = ["F401"]
# Allow longer lines in tests
"tests/**/*.py" = ["E501"]
# Allow some flexibility in CLI modules
"**/cli.py" = ["T201", "T203"]  # print statements for CLI output

[tool.ruff.lint.isort]
# Import sorting configuration
known-first-party = ["stomper"]
force-sort-within-sections = true
split-on-trailing-comma = true

[tool.ruff.lint.flake8-quotes]
# Quote style preferences
docstring-quotes = "double"
inline-quotes = "double"

[tool.ruff.format]
# Ruff formatter configuration
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.mypy]
# MyPy configuration - balanced but thorough
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true
ignore_missing_imports = false


# Plugin configuration
plugins = []
